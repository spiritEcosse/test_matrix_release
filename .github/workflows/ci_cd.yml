# This is a basic workflow to help you get started with the GitHub Auto-Release on Commit Action.

name: AutoRelease

on: [push]


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    build:
        continue-on-error: false
        strategy:
            matrix:
                version: [ 10, 12 ]
                os: [ubuntu-latest]

        runs-on: ${{ matrix.os }}
        steps:
            - run: echo Version of ${{ matrix.os }} ${{ matrix.version }}
            - uses: actions/checkout@v3

            - name: Prepare release
              if: contains(github.ref, 'refs/tags/')
              run: mkdir -p output

            - name: Build project
              uses: nicledomaS/cmake_build_action@v1.4

            - name: Create a file
              if: contains(github.ref, 'refs/tags/')
              run: echo ${{ matrix.version }} > output/${{ matrix.version }}_my_file.txt

            - name: Upload RPM "${{ matrix.version }}"
              if: contains(github.ref, 'refs/tags/')
              uses: actions/upload-artifact@v3
              with:
                  name: txt-${{ matrix.version }}
                  path: output
                  if-no-files-found: error


    release:
        name: Release
        continue-on-error: false
        # The type of runner that the job will run on
        needs: build
        runs-on: ubuntu-latest
        if: contains(github.ref, 'refs/tags/')

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            - name: Download txt
              uses: actions/download-artifact@v3
              with:
                  name: txt-10

            - name: Extract Version Name
              id: extract_name
              uses: actions/github-script@v4
              with:
                  result-encoding: string
                  script: |
                      return context.payload.ref.replace(/refs\/tags\//, '');

#            - name: setup python
#              uses: actions/setup-python@v4
#              with:
#                python-version: 3.11 #install the python needed

            - name: Install jira
              run: |
                python -m pip install --upgrade pip
                pip install jira

            - name: Generate notes from jira
              id: generate_notes
              run: |
                  from os import environ as env
            
                  file_path = env.get('GITHUB_ENV', None)
                  if file_path is None:
                    raise OSError('Environment file not found')
                  
                  from jira import JIRA
                  from os import environ as env
                  import requests
                  from requests.auth import HTTPBasicAuth
                  from collections import defaultdict
                  
                  jira = JIRA(env['JIRA_HOST'], basic_auth=(env['JIRA_USER'], env['JIRA_TOKEN']))
                  issues = jira.search_issues(f"project=FB and fixVersion=${{ steps.extract_name.outputs.result }}")
                  
                  with requests.sessions.Session() as session:
                    session.auth = (env['JIRA_USER'], env['JIRA_TOKEN'])
                    d = defaultdict(list)
                    for issue in issues[:5]:
                      d[issue.fields.issuetype].append(issue)
                    print(d.keys(), len(issues))
                    notes_list = []

                    for group, issues in d.items():
                        notes_list.append("<details>")

                        notes_list.append(f"<summary>{group}</summary>\n")
                        for issue in issues:
                            res = session.get(f"{env['JIRA_HOST']}/rest/dev-status/1.0/issue/details?issueId={int(issue.id)}&applicationType=github&dataType=pullrequest")
                            j = res.json()
                            pull_request = j['detail'][0]['pullRequests'][0]['url'] if j['detail'] else ""
                            last_commit = j['detail'][0]['branches'][0]['lastCommit']['url'] if j['detail'] else ""
                            notes_list.append(f"* [{issue.key}]({issue.permalink()}); {issue.fields.summary}; @spiritEcosse in {pull_request}; commit: {last_commit}")
                        notes_list.append("</details>")
                    notes_list.append("\n## Other")
                    notes_list.append(f"**Full Changelog**: https://github.com/spiritEcosse/bible/commits/${{ steps.extract_name.outputs.result }}")
                  
                  notes = "\n".join(notes_list)

                  with open(file_path, 'a') as gh_envs:
                    gh_envs.write(f"NOTES={notes}\n")
              shell: python

            - name: Create a release
              uses: softprops/action-gh-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
              with:
                  name: ${{ steps.extract_name.outputs.result }}
                  draft: false
                  prerelease: false
                  body: ${{ env.ENV_NAME }}
                  files: '*.txt'
